// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["connectOrCreate", "transactionApi"]
  previewFeatures = ["uncheckedScalarInputs"]
}

generator jsonSchema {
  provider = "node node_modules/prisma-json-schema-generator"
  // output = "custom-output-path"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id          String    @default(uuid()) @id
  numSeq      Int       @default(autoincrement())
  email       String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  lastName    String?
  firstName   String?
  title       String?
  Role        Role      @default(USER)
  nickName    String?
  Gender      Gender?
  pwdHash     String?   
  salt        String?
  social      Json?
  language    String?    @default("en")
  address     Json?
  // Management of the state of the account
  isValidated  DateTime? // Null = non validated
  isSuspended  DateTime? // Null = not suspended
  isDeleted    DateTime? // Null = not deleted
  
  // Specific - Access right
  isAdmin      Boolean? @default(false)

  // Relation fields
  // Inner relations
  manager      User?             @relation("ManagerTeams", fields: [managerId], references: [id]) // Self 1 to n
  managerId    String?           @map("manager")   // Self 1 to n
  Team         User[]            @relation("ManagerTeams")

  //Outside relations
  Profile     Profile[]         @relation(references: [id]) // implicit m:n 
  Group        Group[]           @relation(references: [id])   // implicit m:n
  Post         Post[]   // 1:n
  Comment      Comment[]   // 1:n
  Todo         Todo[]            @relation(references: [id])   // Explicit m:n
  UserTodoLink UserTodoLink[]
  ChangesLog   ChangesTracking[]
  
  // Token
  Token         Token[]
}

model Token {
  id        Int     @default(autoincrement()) @id
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  
  type       TokenType
  emailToken String?   @unique // Used for short lived email token and forgot email
  valid      Boolean   @default(true)
  expiration DateTime   

  // Relation fields
  user       User @relation(fields: [userId], references: [id])
  userId     String
}

enum TokenType {
  EMAIL // used as a short-lived token sent to the user's email
  API
  FORGOT // Used for the loink back received by email if the pwd is forgotten
}

model Profile {
  id           String   @default(uuid()) @id
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orderProfile Int
  // implicit m:n
  User         User[]   @relation(references: [id])
  bio          String
  isDeleted    DateTime? // Null = not deleted
}

model Group {
  id           String   @default(uuid()) @id
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orderGroup   Int
  name         String
  // implicit m:n
  User         User[]   @relation(references: [id])
  // todo       Todo      @relation("groupTodo", fields: [todoId], references: [id])
  // todoId     String       // relation scalar field  (used in the `@relation` attribute above
  // implicit m:n
  Todo         Todo[]   @relation(references: [id])
  isDeleted    DateTime? // Null = not deleted
}

model Todo {
  id           String        @default(uuid()) @id
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orderTodo    Int
  title        String
  content      String?
  state        TodoState      @default(CREATION)
  published    Boolean        @default(false)
  public       Boolean        @default(false)
  mainTodo     Todo?          @relation("MainSubTodo", fields: [mainTodoId], references: [id])
  mainTodoId   String?        @map("mainTodo")
  SubTodo      Todo[]         @relation("MainSubTodo")
  // Explicit m:n
  User         User[]         @relation(references: [id])
  // implicit m:n
  Group        Group[]        @relation(references: [id])
  UserTodoLink UserTodoLink[]
  isDeleted    DateTime? // Null = not deleted
}

enum TodoState {
  CREATION
  STANDBY
  RUNNING
  DONE
}

model UserTodoLink {
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  todoId      String
  todo        Todo     @relation(fields: [todoId], references: [id])
  isAuthor    Boolean  @default(true)
  isAssigned  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([userId, todoId])
}

enum Gender {
  MALE
  FEMELE
  UNKNOWN
}

enum Role {
  GUEST
  USER
  ADMIN
  SUPERADMIN
}

// model AccountValidation{
//   id           String   @default(uuid()) @id
//   isValidated  Boolean
//   emailToken   String   @unique
//   timeStamp    DateTime
// }

model File {
  id          String @default(uuid()) @id
  numSeq      Int       @default(autoincrement())
  name        String
  storageName String @unique
  type        String?
  data        String?
  owner       String?
  size        Int?
  isDeleted   DateTime? // Null = not deleted
  isArchived  DateTime? // Null = not archived
  }

model ChangesTracking {
  id           Int      @default(autoincrement()) @id
  doneAt       DateTime @default(now())
  modifiedBy   User     @relation(fields: [authorId], references: [id])
  // relation scalar field  (used in the `@relation` attribute above
  authorId     String
  modelName    String
  recordId     String
  operation    String
  newData      Json
  oldData      Json
}

model Post {
  id          String     @default(uuid()) @id
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  orderPost   Int?
  published   Boolean    @default(false)
  title       String
  content     String?
  author      User       @relation(fields: [authorId], references: [id])
  // relation scalar field  (used in the `@relation` attribute above
  authorId    String
  // implicit m:n
  Category    Category[] @relation(references: [id])
  Comment     Comment[]
  isDeleted   DateTime? // Null = not deleted
}

model Category {
  id            String  @default(uuid()) @id
  orderCategory Int
  name          String
  // implicit m:n
  Post          Post[]  @relation(references: [id])
  isDeleted     DateTime? // Null = not deleted
}

model Comment {
  id            String   @default(uuid()) @id
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDeleted     DateTime? // Null = not deleted
  orderComment  Int
  published     Boolean  @default(false)
  content       String?
  post          Post     @relation(fields: [postId], references: [id])
  // relation scalar field  (used in the `@relation` attribute above
  postId        String
  author        User     @relation(fields: [authorId], references: [id])
  // relation scalar field  (used in the `@relation` attribute above
  authorId      String
}

model ConfigParam {
  id           Int @default(autoincrement()) @id
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  value         String
  utility       String
}

model Emaildomain {
  id           Int @default(autoincrement()) @id
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  domain        String  @unique
  allowed       Boolean
}